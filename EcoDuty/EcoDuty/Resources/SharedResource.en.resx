<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add place" xml:space="preserve">
    <value>Add place</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="AddressError" xml:space="preserve">
    <value>Address size 3 to 40 characters</value>
  </data>
  <data name="AddressRequired" xml:space="preserve">
    <value>Address not specificate</value>
  </data>
  <data name="AutoNumber" xml:space="preserve">
    <value>Technic number</value>
  </data>
  <data name="AutoNumberError" xml:space="preserve">
    <value>Invalid technic number</value>
  </data>
  <data name="AutoNumberRequired" xml:space="preserve">
    <value>Technic number not specificate</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="CityError" xml:space="preserve">
    <value>Invalid city name</value>
  </data>
  <data name="CityRequired" xml:space="preserve">
    <value>City name not specified</value>
  </data>
  <data name="ConfirmPassword" xml:space="preserve">
    <value>Confirm password</value>
  </data>
  <data name="ConfirmPasswordErro" xml:space="preserve">
    <value>Password do not match</value>
  </data>
  <data name="Create New" xml:space="preserve">
    <value>Create New</value>
  </data>
  <data name="CurrentRate" xml:space="preserve">
    <value>Current Rate</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="EcoStandart" xml:space="preserve">
    <value>Environmental standard</value>
  </data>
  <data name="EcoType" xml:space="preserve">
    <value>Type of heating</value>
  </data>
  <data name="EcoTypeError" xml:space="preserve">
    <value>Type of heating name size from 3 to 30 characters</value>
  </data>
  <data name="EcoTypeRequired" xml:space="preserve">
    <value>Type of heating not specificated</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email*</value>
  </data>
  <data name="EmailError" xml:space="preserve">
    <value>Invalid email</value>
  </data>
  <data name="EmailRequired" xml:space="preserve">
    <value>Email not specified</value>
  </data>
  <data name="EngineVolume" xml:space="preserve">
    <value>Engine volume(см³)</value>
  </data>
  <data name="EngineVolumeError" xml:space="preserve">
    <value>Engine displacement from 200 to 10000</value>
  </data>
  <data name="Estimated Penalty Points" xml:space="preserve">
    <value>Estimated Penalty Points</value>
  </data>
  <data name="Fine" xml:space="preserve">
    <value>Penalty</value>
  </data>
  <data name="Fuel" xml:space="preserve">
    <value>Fuel</value>
  </data>
  <data name="HousingType" xml:space="preserve">
    <value>Type of hous</value>
  </data>
  <data name="HousingTypeError" xml:space="preserve">
    <value>Type of hous name size from 3 to 30 characters</value>
  </data>
  <data name="HousingTypeRequired" xml:space="preserve">
    <value>Type of hous not specificated</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name*</value>
  </data>
  <data name="NameError" xml:space="preserve">
    <value>Invalid name</value>
  </data>
  <data name="NameRequired" xml:space="preserve">
    <value>Name not specified</value>
  </data>
  <data name="Passport" xml:space="preserve">
    <value>Passport number*</value>
  </data>
  <data name="PassportError" xml:space="preserve">
    <value>Invalid passport number</value>
  </data>
  <data name="PassportRequired" xml:space="preserve">
    <value>Passport number not specified</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password*</value>
  </data>
  <data name="PasswordError" xml:space="preserve">
    <value>Password must be between 6 and 30 characters</value>
  </data>
  <data name="PasswordRequired" xml:space="preserve">
    <value>Password not specified</value>
  </data>
  <data name="PlaceNull" xml:space="preserve">
    <value>Place was deleted</value>
  </data>
  <data name="PlacesFine" xml:space="preserve">
    <value>All Places Fines</value>
  </data>
  <data name="PlaceType" xml:space="preserve">
    <value>Place type</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Sensor" xml:space="preserve">
    <value>Sensor</value>
  </data>
  <data name="Sensors" xml:space="preserve">
    <value>Sensors</value>
  </data>
  <data name="SensorsFine" xml:space="preserve">
    <value>All Sensors Fines(IoT)</value>
  </data>
  <data name="SensorType" xml:space="preserve">
    <value>Type of sensor</value>
  </data>
  <data name="SensorTypeError" xml:space="preserve">
    <value>Type of sensor name size from 1 to 30 characters</value>
  </data>
  <data name="SensorTypeRequired" xml:space="preserve">
    <value>Type of sensor not specificated</value>
  </data>
  <data name="SerialError" xml:space="preserve">
    <value>Serial Number Size 10 characters</value>
  </data>
  <data name="SerialNumber" xml:space="preserve">
    <value>Serial number</value>
  </data>
  <data name="SerialRequired" xml:space="preserve">
    <value>Serial number not specificate</value>
  </data>
  <data name="SizeFine" xml:space="preserve">
    <value>Amount of penalty points</value>
  </data>
  <data name="Surname" xml:space="preserve">
    <value>Surname*</value>
  </data>
  <data name="SurnameError" xml:space="preserve">
    <value>Invalid surname</value>
  </data>
  <data name="SurnameRequired" xml:space="preserve">
    <value>Surname not specified</value>
  </data>
  <data name="TaxIdentError" xml:space="preserve">
    <value>Invalid tax identity</value>
  </data>
  <data name="TaxIdentity" xml:space="preserve">
    <value>TaxIdentity number*</value>
  </data>
  <data name="TaxIdentRequiered" xml:space="preserve">
    <value>Tax identity not specified</value>
  </data>
  <data name="TechnicData" xml:space="preserve">
    <value>Year of technic manufacturers</value>
  </data>
  <data name="TechnicNull" xml:space="preserve">
    <value>Technic was deleted</value>
  </data>
  <data name="Technics" xml:space="preserve">
    <value>Technics</value>
  </data>
  <data name="TechnicsFine" xml:space="preserve">
    <value>All Technics Fines</value>
  </data>
  <data name="TechnicType" xml:space="preserve">
    <value>Type of technic</value>
  </data>
</root>